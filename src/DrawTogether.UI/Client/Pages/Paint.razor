@page "/paint/{sessionId}"
@using DrawTogether.UI.Client.Components;
@using DrawTogether.UI.Shared
@using Microsoft.AspNetCore.SignalR.Client
@using System.Reactive.Subjects
@using System.Reactive.Linq
@using System.Security.Policy
@inject NavigationManager navigationManager;
@implements IDisposable;

<h3>Paint!</h3>

<ColorPicker ColorValueChanged="UpdateColor"></ColorPicker>
<CursorPicker CursorSizeChanged="UpdateCursorSize"></CursorPicker>

<section id="paint" style="background-color: cornsilk; width: 900px; height: 500px;" 
         @onmousemove="CursorMove" @onmousedown="CursorDown" @onmouseup="CursorUp">
    <svg width="900" height="500" >
        @foreach (var ConnectedStroke in ConnectedStrokes)
        {
			<path d="@PathData(ConnectedStroke.Points)" fill="None" stroke="@ConnectedStroke.Stroke" stroke-width="@ConnectedStroke.StrokeWidth" ></path>
        }
    </svg>
</section>

<div id="active-users">
    <ol>
        @foreach (var u in Users)
        {
            <li>@u</li>
        }
    </ol>
</div>

<p>@mousePointerMessage</p>

<p>@blazorHubDebugMessage</p>

<button id="reset" @onclick="ResetScreen">Clear Screen</button>

@code {
	[Parameter]
    public string SessionId { get; set; }

    List<ConnectedStroke> ConnectedStrokes = new ();
    HashSet<string> Users = new HashSet<string>();

    private string _hubUrl;
    private HubConnection _hubConnection;

    protected override async Task OnInitializedAsync()
    {
        // Create the chat client
        var baseUrl = navigationManager.BaseUri;

        _hubUrl = navigationManager.BaseUri.TrimEnd('/') + DrawHubConstants.HubUri;

        blazorHubDebugMessage = $"Attempting to connect to {_hubUrl}";

        _hubConnection = new HubConnectionBuilder()
            .WithUrl(_hubUrl)
            .Build();

        _hubConnection.On<ConnectedStroke>("CreateConnectedStroke", CreateConnectedStroke);
        _hubConnection.On<ConnectedStroke[]>("AddConnectedStrokes", AddConnectedStrokes);
        _hubConnection.On<Guid, Point[]>("AddPointsToConnectedStroke", AddPointsToConnectedStroke);
        _hubConnection.On<string>("AddUser", AddUser);

        await _hubConnection.StartAsync();

        OutboundStrokes = _strokeSubject
            //.Throttle(TimeSpan.FromMilliseconds(20))
            .Buffer(TimeSpan.FromMilliseconds(75), 20)
            .Where(x => x.Count > 0)
            .Subscribe(OnNext);

        await _hubConnection.SendAsync("JoinSession", SessionId);

        await base.OnInitializedAsync();
    }

	protected string PathData(List<Point> Points) {
		var result = "";
		if (Points.Count >= 2)
		{
			result = $"M {Points[0].x} {Points[0].y} ";
			for (int i = 1; i < Points.Count -1; i++)
			{
				result += $"S {Points[i - 1].x / 6 + Points[i].x - Points[i+1].x / 6} {Points[i - 1].y / 6 + Points[i].y - Points[i+1].y / 6} {Points[i].x} {Points[i].y} ";
			}
			result += $"S {Points[^2].x /  3 + Points[^1].x * 2 / 3} {Points[^2].y / 3 + Points[^1].y * 2 / 3} {Points[^1].x} {Points[^1].y} ";
		}
		return result;
	}
	
    private void OnNext(IList<(Guid Id, double x, double y)> strokes)
    {
		strokes.GroupBy(s => s.Id).ToList().ForEach(points =>
		{
			_hubConnection.SendAsync("AddPointsToConnectedStroke", SessionId, points.Key, points.Select(p => new Point(p.x, p.y)).ToArray());
		});
    }

    private void CreateConnectedStroke(ConnectedStroke connectedStroke)
    {
        ConnectedStrokes.Add(connectedStroke);
		
        // Inform blazor the UI needs updating
        StateHasChanged();
    }

    private void AddConnectedStrokes(ConnectedStroke[] connectedStrokes)
    {
        ConnectedStrokes.AddRange(connectedStrokes);
		
        // Inform blazor the UI needs updating
        StateHasChanged();
    }

	private void AddPointsToConnectedStroke(Guid id, Point[] points)
	{
		ConnectedStrokes.Where(s => s.Id == id).First().Points.AddRange(points);
        StateHasChanged();
	}

    private void AddUser(string userName)
    {
        Users.Add(userName);
        StateHasChanged();
    }

    private void RemoveUser(string userName)
    {
        Users.Remove(userName);
        StateHasChanged();
    }


    double cX = 110.0d;
    double cY = 110.0d;
    private string mousePointerMessage = "foo";
    private string blazorHubDebugMessage = "bar";
    private string Color = "black";
    private Subject<(Guid Id, double x, double y)> _strokeSubject = new ();
    private IDisposable OutboundStrokes { get; set; }
    private int CursorSize = 8;

	private ConnectedStroke CurrentConnectedStroke {get; set;}

    private void CursorDown(MouseEventArgs e)
	{
		CurrentConnectedStroke = new ConnectedStroke() { Id = Guid.NewGuid(), Stroke = Color, StrokeWidth = CursorSize };
		_hubConnection.SendAsync("CreateConnectedStroke", SessionId, CurrentConnectedStroke);
        if (e.Buttons == 1)
        {
            _strokeSubject.OnNext((CurrentConnectedStroke.Id, e.OffsetX, e.OffsetY));
        }
	}

    private void CursorMove(MouseEventArgs e)
    {
		cX = e.OffsetX;
		cY = e.OffsetY;
        //mousePointerMessage = $"Mouse coordinates: {e.ScreenX}:{e.ScreenY}";
        mousePointerMessage = $"Moving circle to {e.OffsetX},{e.OffsetY} [button pressed? {e.Buttons}]";
        if (e.Buttons == 1)
        {
            _strokeSubject.OnNext((CurrentConnectedStroke.Id, e.OffsetX, e.OffsetY));
        }
    }

    private void CursorUp(MouseEventArgs e)
	{
        if (e.Buttons == 1)
        {
            _strokeSubject.OnNext((CurrentConnectedStroke.Id, e.OffsetX, e.OffsetY));
        }
	}

    private void UpdateColor(string color)
    {
        Color = color;
    }

    private void UpdateCursorSize(int cursorSize)
    {
        CursorSize = cursorSize;
    }

    private void ResetScreen()
    {
        //strokes.Clear();
    }

    public void Dispose()
    {
        _hubConnection.DisposeAsync();
        OutboundStrokes.Dispose();
    }
}
